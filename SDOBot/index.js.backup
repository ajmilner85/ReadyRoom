/**
 * COMBINED APPLICATION SERVER FOR FLY.IO DEPLOYMENT
 * 
 * PURPOSE: Complete Express server with Discord bot integration for cloud deployment
 * 
 * RESPONSIBILITIES:
 * - Express server on port 3001 (listening on 0.0.0.0 for Fly.io)
 * - All API endpoints (/api/events, /api/reminders, etc.)
 * - Event creation, editing, deletion logic
 * - Reminder processing and scheduling
 * - Database operations (Supabase)
 * - Discord bot initialization and integration
 * - User authentication and authorization
 */
const path = require('path');
const dotenv = require('dotenv');
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

// Load environment variables from .env in the project root
const envPath = path.resolve(__dirname, '../.env');

let result = dotenv.config({ path: envPath });
if (result.error) {
  console.error('Error loading environment files:', result.error);
}

// Require the Discord bot (path adjusted for SDOBot directory)
const { 
  publishEventToDiscord, 
  initializeDiscordBot, 
  deleteEventMessage,
  editEventMessage, 
  getAvailableGuilds,
  countdownManager,
  sendReminderMessage,
  postMessageToThread,
  getGuildRoles,
  getGuildMember,
  shouldUseThreadsForEvent,
  createThreadFromMessage,
  deleteThread
} = require('./discordBot');

// Import Supabase client (path adjusted for SDOBot directory)
const { supabase, getEventByDiscordId } = require('./supabaseClient');

// Import Discord.js for guild member operations
const { Client, GatewayIntentBits } = require('discord.js');

// Add Discord client for caching at the top level
const discordClient = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildMembers]
});

// Cache for Discord server channels to avoid redundant fetches
const channelCache = {
  timestamp: 0,
  ttl: 5 * 60 * 1000, // 5 minutes cache
  servers: {}
};

const app = express();
const PORT = process.env.SERVER_PORT || 3001;

// Configure CORS with production origins for Fly.io deployment
app.use(cors({
  origin: [
    'https://readyroom.vercel.app',
    'https://readyroom-git-development-ajmilner85s-projects.vercel.app',
    'http://localhost:5173', 
    'http://127.0.0.1:5173', 
    'http://localhost:4173'
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Request-ID'],
  credentials: true
}));
app.use(bodyParser.json());

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Also support HEAD requests for lightweight health checks
app.head('/api/health', (req, res) => {
  res.status(200).end();
});

// API endpoint to save reference timezone setting
app.post('/api/settings/timezone', async (req, res) => {
  try {
    const { timezone } = req.body;
    
    if (!timezone) {
      return res.status(400).json({ error: 'Timezone is required' });
    }
    
    // Update timezone setting for all squadrons (maintaining current global behavior)
    // Use raw SQL to update JSONB field since Supabase client doesn't handle JSONB updates well
    const { error } = await supabase
      .rpc('update_squadron_timezone', { new_timezone: timezone });
    
    if (error) {
      throw error;
    }
    
    console.log(`[SETTINGS] Updated reference timezone to: ${timezone}`);
    res.json({ success: true });
  } catch (error) {
    console.error('[ERROR] Error saving timezone setting:', error);
    res.status(500).json({ error: error.message || 'Failed to save timezone setting' });
  }
});

// Add all API routes and server logic here
// [Routes will be added - this is just the first part]

// Server must listen on 0.0.0.0 for Fly.io (not 127.0.0.1)
app.listen(PORT, '0.0.0.0', () => {
  console.log(`ReadyRoom Combined Server running on 0.0.0.0:${PORT}`);
  console.log('Server ready to accept connections from Fly.io proxy');
});

// Initialize Discord bot and client connection
(async function() {
  try {
    console.log('Initializing Discord bot and client connection...');
    await initializeDiscordBot();
    
    // Login the persistent client
    await discordClient.login(process.env.BOT_TOKEN);
    console.log('Discord client connection established successfully');
    
    // Log that the bot has been restarted (useful for debugging)
    console.log(`[STARTUP] Discord bot initialized at ${new Date().toISOString()}`);
    console.log('[STARTUP] Note: Previously cached event data will be reloaded from database');
  } catch (error) {
    console.error('Failed to initialize Discord:', error);
  }
})();